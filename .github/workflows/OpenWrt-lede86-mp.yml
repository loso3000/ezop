name: OpenWrt-lede86-mp

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      souce:
        description: '源码:'
        default: 'lede'
        required: true
        type: choice
        options: [ lede , ledes]
      branch:
        description: '仓库的分支：'
        default: 'stable'
        required: true
        type: choice
        options: [ master, stable ]
      target:
        description: '机型：'
        default: 'x86_64'
        required: true
        type: choice
        options: [ x86_64, rm2100, xm2100, r2s, r4s, r4se, r5s, r5c ]
      config_s:
        description: '配置:'
        default: 'Mini'
        required: true
        type: choice
        options: [ Super, Bypass, Mini, Plus ]
      config_v:
        description: '版本:'
        default: 'Free'
        required: true
        type: choice
        options: [ Free , Vip ]
      cpu_s:
        description: 'CPU优选'
        required: true
        default: '8'
        type: choice
        options:
          - '8'
          - '8370C'
          - '8272CL'
          - '8171M'
      date_s:
        description: '固件日期'
        default: 'default'
        required: false
env:
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diypart1.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    name: ${{github.event.inputs.souce}}-${{github.event.inputs.config_s}}-${{github.event.inputs.config_v}}-${{github.event.inputs.target}}-${{github.event.inputs.branch}}-${{github.event.inputs.date_s}}
    env:
      SOUCE: ${{github.event.inputs.souce}}
      REPO_BRANCH: ${{github.event.inputs.branch}}
      CONFIG_S: ${{github.event.inputs.config_s}}
      CONFIG_V: ${{github.event.inputs.config_v}}
      TARGET_DEVICE: ${{github.event.inputs.target}}
      CPU_S: ${{github.event.inputs.cpu_s}}
      DATE_S: ${{github.event.inputs.date_s}}
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Check server performance
      run: |
         echo "警告⚠"
         echo "若分配的服务器性能不足，务必及时取消，重新运行！"
         echo "已知编译成功CPU型号：8370C,8171M"
         echo "已知性能不足CPU型号：8272CL E5-2673"
         echo -e "-------------- ------------CPU信息------------------------------------------\n"
         echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
         echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
         echo "-------------------------------内存信息-------------------------------------------"
         echo "已安装内存详细信息："
         sudo lshw -short -C memory | grep GiB
         echo -e "\n"
         echo "-----------------------------硬盘信息---------------------------------------------"
         echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
         echo "硬盘详情："
         df -Th
         
         if grep  "8370" "/proc/cpuinfo" ; then
          echo "CPU YES！！！"
          echo "CKCPU=success" >> $GITHUB_ENV
         else
             echo "CPU NO！！！"
             echo "CKCPU=failure" >> $GITHUB_ENV
             #exit 1
         fi
         
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
          docker rmi $(docker images -q)
          sudo -E rm -rf $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "1{s/\r$//;p;q}")
          sudo -E apt -yqq update
          sudo -E apt -yqq purge $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "2{s/\r$//;p;q}")
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq install $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "3{s/\r$//;p;q}")
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        if [[ $SOUCE == 'lede' ]]; then
          REPO_URL='https://github.com/coolsnowwolf/lede'
        elif  [[ $SOUCE == 'im' ]]; then
          REPO_URL='https://github.com/immortalwrt/immortalwrt'
        elif  [[ $SOUCE == 'ledes' ]]; then
          REPO_URL='https://github.com/DHDAXCW/lede-rockchip'
        fi
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        git clone https://github.com/fkuetgjfbj/lede86 lede
        rm -rf lede/.github/tmp/package
        cp -Rf ./lede/* openwrt
        cp -Rf lede/.github/tmp/* openwrt
        if [[ $DATE_S == 'default' ]]; then
          echo "DATA=`date +%Y%m%d_%H -d +"12"hour`" >> $GITHUB_ENV
        else 
          echo "DATA=$DATE_S" >>$GITHUB_ENV
        fi
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
    - name: Cache
      uses: klever1988/cachewrtbuild@main
      with:
       ccache: 'true'
       mixkey: ${{ env.TARGET_DEVICE }}
       clean:  'false'
       prefix: ${{ github.workspace }}/openwrt

    - name: Update feeds
      run: | 
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a 
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x diypart1.sh
        cd openwrt
        chmod +x diypart1.sh
         echo  "============start=============="
         [ -e diypart1.sh ] && bash ./diypart1.sh || bash ../diypart1.sh
         chmod -R 755 .
         echo  "============end=============="
    - name: Generate configuration file
      run: |
         cd openwrt
         cat  ./config/${TARGET_DEVICE}/${TARGET_DEVICE}  > .config
         cat  ./config/${TARGET_DEVICE}/${CONFIG_S}  >> .config
         cat  ./config/${TARGET_DEVICE}/comm  >> .config
         if [[ ${CONFIG_V} == 'Vip' ]]; then
               cat  ./config/${TARGET_DEVICE}/vip  >> .config
         fi
         echo -e 'CONFIG_DEVEL=y\nCONFIG_CCACHE=y' >> .config #Cache.Speedup
         # case "${CONFIG_S}" in
         # "Vip"-*)
         #   cat  ./${MODE_S}/commwifi  >> .config
         #  ;;
         #  esac
          
         make defconfig 
        
    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Packages
      id: compile
      run: |
         df -h
         cd openwrt
         echo -e "$(nproc) thread compile"
         make tools/compile -j$(nproc) || make tools/compile -j72
         make toolchain/compile -j$(nproc) || make toolchain/compile -j72
         make target/compile -j$(nproc) || make target/compile -j72 IGNORE_ERRORS=1
         make diffconfig
         make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j72 IGNORE_ERRORS=1
         make package/index
         bash  bakkmod.sh
    - name: Generate Firmware
      run: |
         df -h
         cd openwrt 
         make package/install -j$(nproc) || make package/install -j1 V=s
         make target/install -j$(nproc) || make target/install -j1 V=s
         make checksum
         bash buildmd5.sh
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize files
      id: organize
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.DATA }}-EzOpWrt-Ipv6-${{ env.CONFIG_V }}-${{ env.SOUCE }}-${{ env.CONFIG_S }}-${{env.TARGET_DEVICE}}-Firmware
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN}}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
          retain_days: 1
          keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.2.1
      with:
          keep_latest: 1
          delete_tags: true
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete Artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
         name: |
            bin-archive
